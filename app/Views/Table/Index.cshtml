@using app.Models;
@model IEnumerable<app.Models.TableModel>
@{
    ViewData["Title"] = "TABLE & COLUMN List";
}
<h2>@ViewData["Title"]</h2>
<!--<h3>@ViewData["Message"]</h3>-->

<div style="font-family:Arial">
<Table cellpadding="5" cellspacing="2" border="1" id="myTable">
<tr>
<th>TABLE NAME</th>
<th>COLUMN NAME</th>
</tr>
	@foreach (TableModel style in Model)
	{
	<tr>
		<TD><a href="~/table/index/@style.TABLE_NAME">@style.TABLE_NAME</a></TD>
		<TD>@style.COLUMN_NAME</TD>
	</tr>
	}
</Table>
 <button onclick="goBack()">Go Back</button>

<script>
function goBack() {
  window.history.back();
}
</script> 
</div>

<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<script src="https://assistant-web.watsonplatform.net/loadWatsonAssistantChat.js"></script>
<script>

    // integrationID and region are required config options to your Web Chat.
    // We provide them here, but can extend this "options" variable
    // before we initialize the Web Chat.
    const options = {
        integrationID: "2bfa63dc-b3d4-4d33-ae14-f9e80f18977f",
        region: "us-south"
    };

    /* 
      Instructions
      - Upload the included setting-context.json skill and create a Web Chat integration in an
        assistant using the uploaded skill.
      - Update config with your `integrationID` and `region`.
      - Ask the Web Chat "Is it party time?"
      - When you send the message, `context.skills['main skill'].user_defined.party_time` will
        be set to true, and the assistant will reply that it is indeed party time.
    */

    /**
    * Following the v2 message API Response
    * at https://cloud.ibm.com/apidocs/assistant/assistant-v2#send-user-input-to-assistant,
    * we add some items to context.
    */
    function preSendhandler(event) {
      event.data.context.skills['main skill'].user_defined.party_time = true;

      // You can OPTIONALLY return a promise and we will wait to continue processing until the promise is resolved. If
      // you return nothing we will immediately continue processing the event.
      /*
      return new Promise(function(resolve) {
        myAsyncThing.then(function(moreData) {
          // Do some other manipulation of event.data...
          resolve();
        });
      }); 
      */
      
    }

    // Initialize the Web Chat with the default options including your
    // integrationsID and region.
    window.loadWatsonAssistantChat(options).then(function(instance){
      // Subscribe to the "pre:send" event.
      instance.on({ type: "pre:send", handler: preSendhandler });
      instance.render();
    });
  
</script>


<link rel="stylesheet" type="text/css" href="~/js/DataTables/datatables.min.css"/>
 
<script type="text/javascript" src="~/js/DataTables/datatables.min.js"></script>

